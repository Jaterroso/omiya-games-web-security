{
  "api/OmiyaGames.Web.Security.DebugWebLocation.html": {
    "href": "api/OmiyaGames.Web.Security.DebugWebLocation.html",
    "title": "Class DebugWebLocation | Web Security documentation",
    "keywords": "Class DebugWebLocation Helper debug methods for OmiyaGames.Web.Security namespace. WebLocationChecker Inheritance Object DebugWebLocation Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public static class DebugWebLocation Remarks The MIT License (MIT) Copyright (c) 2016-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-preview.1 Date: 5/20/2020 Author: Taro Omiya Initial verison. Methods GetDebugMessage(StringBuilder, WebLocationChecker) Generates a debug message based on info about webChecker Declaration public static string GetDebugMessage(StringBuilder builder, WebLocationChecker webChecker) Parameters Type Name Description StringBuilder builder WebLocationChecker webChecker Returns Type Description String"
  },
  "api/OmiyaGames.Web.Security.html": {
    "href": "api/OmiyaGames.Web.Security.html",
    "title": "Namespace OmiyaGames.Web.Security | Web Security documentation",
    "keywords": "Namespace OmiyaGames.Web.Security Classes DebugWebLocation Helper debug methods for OmiyaGames.Web.Security namespace. WebLocationChecker WebLocationChecker Original code by andyman from Github: https://gist.github.com/andyman/e58dea85cce23cccecff Extra modifications by jcx from Github: https://gist.github.com/jcx/93a3fc93531911add8a8 Add this script to an object in the first scene of your game. For WebGL builds, this script grabs the domain the game is running on, and verifies it against two lists: 1) The list of strings in DefaultDomainList , or 2) If a was successfully downloaded from RemoteDomainListUrl , matches the domain to any of the globs listed in the . Remember that if the is encrypted, to set the OmiyaGames.Web.Security.WebLocationChecker.domainDecrypter in the Unity inspector. If the script is attached to a with already attached, the above example code will run automatically on SceneAwake() . WebLocationInfo Provides debugging information for the WebGL build, and its host information. Enums WebLocationChecker.State Indicates progression and result of this script."
  },
  "api/OmiyaGames.Web.Security.WebLocationChecker.html": {
    "href": "api/OmiyaGames.Web.Security.WebLocationChecker.html",
    "title": "Class WebLocationChecker | Web Security documentation",
    "keywords": "Class WebLocationChecker Original code by andyman from Github: https://gist.github.com/andyman/e58dea85cce23cccecff Extra modifications by jcx from Github: https://gist.github.com/jcx/93a3fc93531911add8a8 Add this script to an object in the first scene of your game. For WebGL builds, this script grabs the domain the game is running on, and verifies it against two lists: 1) The list of strings in DefaultDomainList , or 2) If a was successfully downloaded from RemoteDomainListUrl , matches the domain to any of the globs listed in the . Remember that if the is encrypted, to set the OmiyaGames.Web.Security.WebLocationChecker.domainDecrypter in the Unity inspector. If the script is attached to a with already attached, the above example code will run automatically on SceneAwake() . Inheritance Object WebLocationChecker Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public class WebLocationChecker : ISingletonScript Remarks The MIT License (MIT) Copyright (c) 2014-2018 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 5/15/2016 Author: Taro Omiya Initial verison. Date: 6/5/2018 Author: Taro Omiya Removed plain-text support. Date: 2/12/2019 Author: Taro Omiya Adding encryption support of the binary . Version: 0.1.0-preview.1 Date: 5/20/2020 Author: Taro Omiya Converting to package. Improving documentation for DocFX support. Examples IEnumerator Start() { WebLocationChecker checker = GetComponent<WebLocationChecker>(); yield return StartCoroutine(checker.CheckDomainList()); Debug.Log(checker.CurrentState); } Fields RemoteDomainListHeader Header string for the Unity Inspector. Declaration public const string RemoteDomainListHeader = \"Remote Domain List\" Field Value Type Description String Properties AllUniqueDomains The of all unique domains. Keys are the globs, and values are the regular expression equivalent. Declaration public Dictionary<string, Regex> AllUniqueDomains { get; } Property Value Type Description Dictionary < String , Regex > CurrentState Indicates the state this script is in. WebLocationChecker.State Declaration public WebLocationChecker.State CurrentState { get; } Property Value Type Description WebLocationChecker.State DefaultDomainList The default list of domains to match RetrievedHostName against. This list excludes the globs stored in a . RemoteDomainListUrl Declaration public string[] DefaultDomainList { get; } Property Value Type Description String [] DownloadDomainsUrl The URL used to download a . Slightly randomized to prevent predictablity. Declaration public string DownloadDomainsUrl { get; } Property Value Type Description String DownloadedDomainList The list of globs in a , if successfully downloaded. Declaration public string[] DownloadedDomainList { get; } Property Value Type Description String [] DownloadErrorMessage Indicates the error when attempting to download a . Declaration public string DownloadErrorMessage { get; } Property Value Type Description String IsDomainListSuccessfullyDownloaded Indicates if a was downloaded or not. Declaration public bool IsDomainListSuccessfullyDownloaded { get; } Property Value Type Description Boolean RemoteDomainListUrl The original URL to download a from. DownloadDomainsUrl Declaration public string RemoteDomainListUrl { get; } Property Value Type Description String RetrievedHostName The domain this WebGL build is running on. Declaration public string RetrievedHostName { get; } Property Value Type Description String Methods CheckDomainList() Declaration public IEnumerator CheckDomainList() Returns Type Description IEnumerator ForceRedirect() Makes the build redirect the browser to OmiyaGames.Web.Security.WebLocationChecker.redirectURL . Declaration public void ForceRedirect() SceneAwake() Declaration public override void SceneAwake() SingletonAwake() Declaration public override void SingletonAwake()"
  },
  "api/OmiyaGames.Web.Security.WebLocationChecker.State.html": {
    "href": "api/OmiyaGames.Web.Security.WebLocationChecker.State.html",
    "title": "Enum WebLocationChecker.State | Web Security documentation",
    "keywords": "Enum WebLocationChecker.State Indicates progression and result of this script. Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public enum State : short Fields Name Description DomainDidntMatch Indicates the domain this WebGL build is running on is not valid: it doesn't match any expected glob/string. DomainMatched Indicates the domain this WebGL build is running on is valid, matching an expected glob/string. EncounteredError Indicates there were trouble verifying the domain. Most likely, this is due to being unable to download a for verification. InProgress Indicates the script is in the middle of evaluating the domain the WebGL build is running on. This process can include downloading a . NotUsed Indicates the script hasn't verified the domain yet."
  },
  "api/OmiyaGames.Web.Security.WebLocationInfo.html": {
    "href": "api/OmiyaGames.Web.Security.WebLocationInfo.html",
    "title": "Class WebLocationInfo | Web Security documentation",
    "keywords": "Class WebLocationInfo Provides debugging information for the WebGL build, and its host information. Inheritance Object WebLocationInfo Namespace : OmiyaGames.Web.Security Assembly : cs.temp.dll.dll Syntax public class WebLocationInfo : MonoBehaviour Remarks Revision History: DateNameDescription >6/13/2018TaroInitial version."
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - Web Security | Web Security documentation",
    "keywords": "Omiya Games - Web Security Web Security is a Github package Omiya Games uses to peform various security features for WebGL builds. This includes: Web Location Checker A script that verifies the build is running on the correct host. Attach to a GameObject like any other MonoBehavior , then call the coroutine, CheckDomainList() , from another script. For example, one can create a script with the method below, then attach it to the same GameObject the WebLocationChecker is on: IEnumerator Start() { // Verify the domain WebLocationChecker checker = GetComponent<WebLocationChecker>(); yield return StartCoroutine(checker.CheckDomainList()); // Check if the domain was verified if(checker.CurrentState == WebLocationChecker.State.DomainMatched) { // Change scene to the main menu SceneManager.LoadScene(\"Main menu\"); } } The script contains the following inspector fields: Field Required? Description Remote Domain List Url No The path to download a DomainList , relative to the root of the WebGL build (typically where index.html is in). The strings in the DomainList will be used to match the domain the build is running on, in addition to strings listed in Domain Must Contain . Leave empty if no file should be downloaded. Domain Decrypter No The StringCryptographer to use to decrypt the content of the downloaded DomainList . Entirely optional, especially if the downloaded file is not expected to be encrypted. GameObjects to Deactivate No A list of GameObjects to deactivate while the script verifies the domain the build is running on. Domain Must Contain Yes A list of strings to verify whether the domain the game is running on matches. This script supports ? and * wildcards (former any single character, while the latter matches a series of character). Force Redirect No If checked, and the domain did not match, prompts the script to redirect to a different website. If this build is embedded in an iframe with redirect permission restrictions (which most browsers enable by default), the redirect may fail with an AccessDenied error. Redirect URL If Force Redirect is checked The URL to redirect to if the doamin did not match. This URL should include https:// Install There are two common methods for installing this package. Through Unity Package Manager Unity's own Package Manager supports importing packages through a URL to a Git repo : First, on this repository page, click the \"Clone or download\" button, and copy over this repository's HTTPS URL. Then click on the + button on the upper-left-hand corner of the Package Manager, select \"Add package from git URL...\" on the context menu, then paste this repo's URL! While easy and straightforward, this method has a few major downside: it does not support dependency resolution and package upgrading when a new version is released. To add support for that, the following method is recommended: Through OpenUPM Installing via OpenUPM's command line tool is recommended because it supports dependency resolution, upgrading, and downgrading this package. If you haven't already installed OpenUPM , you can do so through Node.js's npm (obviously have Node.js installed in your system first): npm install -g openupm-cli Then, to install this package, just run the following command at the root of your Unity project: openupm add com.omiyagames.web.security Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2019-2020 Omiya Games"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log: | Web Security documentation",
    "keywords": "Change Log: 0.1.1-preview.1 Fix: Scripting API documentation for WebLocationChecker should now display. This was due to accidentally creating unknown XML tags in the comments. 0.1.0-preview.1 Initial release New Feature: added WebLocationChecker New Feature: added sample for retrieving debugging information from WebLocationChecker"
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "| Web Security documentation",
    "keywords": "This folder contains markdown files listed under \"Manual\" section in the documentation. When adding or removing any files in this folder, don't forget to update toc.yml accordingly!"
  }
}